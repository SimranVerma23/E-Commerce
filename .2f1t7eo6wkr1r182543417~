import React, { useState, useEffect } from 'react';
import ProductBox from './ProductBox';
import NavBar from './NavBar';
import NotFound from './NotFound';
import Footer from './Footer';
import ProductDetail from './ProductDetail';
import { Routes, Route } from 'react-router-dom';
import CartPage from './CartPage';
import SignUpPage from './SignUpPage';
import LoginPage from './LoginPage';
import LinkBar from './LinkBar';
import ForgotPassword from './ForgotPassword';
import { HiMenu } from 'react-icons/hi';
import AuthRoute from './AuthRoute';
import UserRoute from './UserRoute';
import axios from 'axios';
import Loading from './Loading';
import { UserContext, AlertContext } from "./Contexts";
import Alert from './Alert';

function App() {

  const saveDataString = localStorage.getItem('my-cart') || '{}';

  const saveData = JSON.parse(saveDataString);

  const [cart, setCart] = useState(saveData);
  const [isMenu, setIsMenu] = useState(false);
  const [userLoading, setUserLoading] = useState(true);
  const [user, setUser] = useState();
  const [alert, setAlert] = useState();
  const token = localStorage.getItem("token");

  const removeAlert = () => {
    setAlert(undefined);
  }
  useEffect(() => {
    if (token) {
      axios.get("https://myeasykart.codeyogi.io/me", {
        headers: {
          Authorization: token,
        }
        ,
      }).then((response) => {
        setUser(response.data);
        setUserLoading(false);
      })
    } else {
      setUserLoading(false);
    }

  }, []);

  if (userLoading) {
    return <Loading />
  }

  function handleMenuChange() {
    console.log("status changed", isMenu);
    setIsMenu(!isMenu);
  }
  function handleAddToCart(productId, count) {
    console.log('productId', productId, 'count', count);
    const oldCount = cart[productId] || 0;
    const newCart = { ...cart, [productId]: oldCount + count }
    updateCart(newCart);
  }

  function updateCart(newCart) {
    setCart(newCart)
    const cartString = JSON.stringify(newCart);
    localStorage.setItem('my-cart', cartString);
  }

  const totalCount = Object.keys(cart).reduce(function (previous, current) {
    return previous + cart[current];
  }, 0);

  return (
    <div>
      {/* <Alert type="success" message="login successfull"/> */}
      <UserContext.Provider value={{ user, setUser }}>
        <AlertContext.Provider value={{ alert , setAlert ,removeAlert}}> 
          <Alert />
          <NavBar productCount={totalCount} />
        <HiMenu onClick={handleMenuChange} className="md:hidden" />
        {isMenu && <LinkBar />}
        <div className="flex flex-col h-screen overflow-y-scroll relative">
          <div className='hidden md:block py-4 bg-gray-400'><LinkBar setCart={setCart} /></div>

          <div className=" grow bg-secondary-default">

            <Routes>
              {/* <Route path="/navbar/" element={<UserRoute><NavBar productCount={totalCount}/></UserRoute>}/>
                <Route path="/linkbar/" element={<UserRoute><LinkBar setCart={setCart} /></UserRoute>} /> */}

              <Route index element={<UserRoute><ProductBox /></UserRoute>} />
              <Route
                path="/products/:id/"
                element={<ProductDetail onAddToCart={handleAddToCart} />}
              />
              <Route path="*" element={<NotFound />} />
              <Route path='/cart/' element={<UserRoute><CartPage cart={cart} updateCart={updateCart} /></UserRoute>} />
              <Route path="/signup/" element={<AuthRoute>
                <SignUpPage /></AuthRoute>} />
              <Route path='/login/' element={<AuthRoute><LoginPage/></AuthRoute>} />
              <Route path='/forgot/' element={<ForgotPassword />} />

            </Routes>
          </div>
        </div>
        <Footer />
        </AlertContext.Provider>
      </UserContext.Provider>
    </div>
  );
}

export default App;
